'use client';

import React from 'react';
import { FaPaypal, FaFilePdf, FaChartBar, FaHandsHelping, FaCheckCircle } from 'react-icons/fa';

// Custom PayPal SVG Component
const PayPalIcon: React.FC<{ className?: string }> = ({ className = "" }) => (
  <svg 
    width="37" 
    height="43" 
    viewBox="0 0 37 43" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    className={className}
  >
    <g clipPath="url(#clip0_438_10442)">
      <path d="M31.4194 10.0671C31.4194 15.3428 26.5049 21.5669 19.069 21.5669H11.9064L11.5548 23.7646L9.88385 34.3444H0.982422L6.33742 0.270988H20.7591C25.6154 0.270988 29.436 2.95238 30.8433 6.67868C31.2492 7.76209 31.4447 8.91174 31.4194 10.0671Z" fill="#002991"/>
      <path d="M36.5497 19.8632C36.0746 22.7229 34.5877 25.3218 32.3552 27.1947C30.1226 29.0676 27.2901 30.0922 24.3646 30.0852H19.3908L17.3205 42.8627H8.4668L9.88365 34.3444L11.5556 23.7646L11.9062 21.5669H19.0688C26.4951 21.5669 31.4192 15.3428 31.4192 10.0671C35.0736 11.9354 37.2042 15.711 36.5497 19.8632Z" fill="#60CDFF"/>
      <path d="M31.4193 10.0671C29.8868 9.27299 28.0286 8.78934 26.006 8.78934H13.9298L11.9062 21.5669H19.0689C26.4951 21.5669 31.4193 15.3428 31.4193 10.0671Z" fill="#008CFF"/>
    </g>
    <defs>
      <clipPath id="clip0_438_10442">
        <rect width="35.685" height="42.5917" fill="white" transform="translate(0.982422 0.270988)"/>
      </clipPath>
    </defs>
  </svg>
);

// Custom PDF SVG Component
const PDFIcon: React.FC<{ className?: string }> = ({ className = "" }) => (
  <svg 
    width="43" 
    height="43" 
    viewBox="0 0 43 43" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    className={className}
  >
    <g clipPath="url(#clip0_438_10443)">
      <path fillRule="evenodd" clipRule="evenodd" d="M26.4945 42.1142H3.28C2.50626 42.1131 1.76451 41.8053 1.21739 41.2582C0.670268 40.711 0.362416 39.9693 0.361328 39.1956V10.2103C0.36593 10.1415 0.395292 10.0767 0.443986 10.0278C0.49268 9.979 0.557412 9.94944 0.626214 9.94463H6.86172C7.78309 9.93837 8.66491 9.56941 9.3162 8.91766C9.96749 8.26591 10.3358 7.38383 10.3414 6.46245V0.261497C10.3459 0.192223 10.3756 0.12698 10.4248 0.0780451C10.4741 0.0291099 10.5395 -0.000143812 10.6088 -0.00421143L29.0479 -0.00421143C29.8217 -0.00312333 30.5634 0.304729 31.1106 0.851851C31.6577 1.39897 31.9655 2.14072 31.9666 2.91447V12.1007C31.962 12.1695 31.9326 12.2342 31.8839 12.2829C31.8352 12.3316 31.7705 12.361 31.7017 12.3656C31.2313 12.4427 30.8059 12.6908 30.5073 13.0624C27.3566 17.011 24.3055 21.1241 21.2544 25.1344C20.2598 26.3947 21.0899 28.3846 22.6808 28.3846H26.4945C26.5295 28.3841 26.5642 28.3905 26.5967 28.4036C26.6291 28.4167 26.6586 28.4362 26.6833 28.4609C26.7081 28.4856 26.7277 28.515 26.7409 28.5474C26.7541 28.5798 26.7607 28.6145 26.7602 28.6495V41.8156C26.7602 41.9801 26.6607 42.1142 26.4945 42.1142ZM35.7803 41.8156C35.7803 41.9801 35.6808 42.1142 35.5154 42.1142H28.2187C28.1449 42.1074 28.0765 42.0727 28.0273 42.0173C27.9781 41.9618 27.9519 41.8897 27.9538 41.8156V27.7874C27.9542 27.7089 27.9389 27.6311 27.909 27.5584C27.8792 27.4858 27.8352 27.4199 27.7797 27.3643C27.7241 27.3088 27.6582 27.2648 27.5856 27.235C27.5129 27.2051 27.4351 27.1898 27.3566 27.1902H22.6808C22.0178 27.1902 21.785 26.328 22.1831 25.8304C25.2342 21.8176 28.3849 17.8377 31.436 13.792C31.7017 13.4276 32.1657 13.463 32.4306 13.792C35.5154 17.8048 38.6003 21.8842 41.7172 25.8641C42.0463 26.328 41.8496 27.1902 41.1866 27.1902H36.3775C36.299 27.1898 36.2212 27.2051 36.1486 27.235C36.076 27.2648 36.01 27.3088 35.9545 27.3643C35.899 27.4199 35.855 27.4858 35.8251 27.5584C35.7952 27.6311 35.78 27.7089 35.7803 27.7874V41.8156ZM1.42252 8.31994L8.75211 1.02407C8.79158 0.988544 8.8404 0.965062 8.89279 0.956404C8.94519 0.947745 8.99897 0.954272 9.04777 0.975211C9.09657 0.996151 9.13835 1.03063 9.16818 1.07457C9.198 1.1185 9.21462 1.17006 9.21607 1.22315V6.46245C9.21391 7.08627 8.96519 7.68394 8.52415 8.12513C8.08312 8.56632 7.48554 8.81524 6.86172 8.81763H1.62159C1.38961 8.81763 1.25635 8.51902 1.42252 8.32405V8.31994ZM7.75674 21.6185C7.02707 21.6185 7.02707 20.4915 7.75674 20.4915H17.0763C17.8059 20.4915 17.8059 21.6185 17.0763 21.6185H7.75674ZM7.75674 27.7882C7.02707 27.7882 7.02707 26.6604 7.75674 26.6604H17.0763C17.8059 26.6604 17.8059 27.7882 17.0763 27.7882H7.75674ZM7.75674 33.9579C7.02707 33.9579 7.02707 32.8301 7.75674 32.8301H17.0763C17.8059 32.8301 17.8059 33.9579 17.0763 33.9579H7.75674Z" fill="#FF435B"/>
    </g>
    <defs>
      <clipPath id="clip0_438_10443">
        <rect width="42.1184" height="42.1184" fill="white" transform="translate(0.0585938 -0.00421143)"/>
      </clipPath>
    </defs>
  </svg>
);

// Custom Chart SVG Component
const ChartIcon: React.FC<{ className?: string }> = ({ className = "" }) => (
  <svg 
    width="43" 
    height="43" 
    viewBox="0 0 43 43" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    className={className}
  >
    <path fillRule="evenodd" clipRule="evenodd" d="M5.67201 17.8412L13.4997 10.9902C13.3885 10.6858 13.3317 10.3642 13.3321 10.0401C13.3321 8.51383 14.5694 7.27659 16.0957 7.27659C17.5928 7.27659 18.8117 8.46699 18.8579 9.95288L25.0447 12.1189C25.5515 11.5239 26.3062 11.1464 27.1491 11.1464C27.6078 11.1457 28.0594 11.2597 28.4628 11.4781L35.5952 5.38425C35.4914 5.08925 35.4385 4.77875 35.4388 4.46603C35.4388 2.9398 36.6761 1.70248 38.2024 1.70248C39.7288 1.70248 40.9661 2.9398 40.9661 4.46603C40.9661 5.99243 39.7288 7.22975 38.2024 7.22975C37.7437 7.23046 37.2921 7.11645 36.8887 6.89809L29.7563 12.9919C29.8601 13.2869 29.913 13.5974 29.9127 13.9102C29.9127 15.4364 28.6754 16.6737 27.149 16.6737C25.6519 16.6737 24.4331 15.4833 24.3869 13.9975L18.2001 11.8315C17.6932 12.4265 16.9386 12.8039 16.0957 12.8039C15.6478 12.8046 15.2066 12.6959 14.8103 12.4873L6.98262 19.3382C7.09389 19.6426 7.15063 19.9642 7.15024 20.2883C7.15024 21.8147 5.91292 23.0518 4.38652 23.0518C2.86037 23.0517 1.62305 21.8145 1.62305 20.2881C1.62305 18.7617 2.86037 17.5246 4.3866 17.5246C4.83445 17.5239 5.27569 17.6326 5.67201 17.8412ZM36.1001 12.6874C35.4129 12.6874 34.8523 13.2479 34.8523 13.9352V39.4011C34.8523 40.0884 35.4129 40.6489 36.1001 40.6489H40.305C40.9924 40.6489 41.5529 40.0884 41.5529 39.4011V13.9352C41.5529 13.2479 40.9925 12.6874 40.305 12.6874H36.1001ZM25.0466 22.8637C24.3593 22.8637 23.7989 23.4242 23.7989 24.1115V39.6619C23.7989 40.3493 24.3594 40.9098 25.0466 40.9098H29.2517C29.939 40.9098 30.4994 40.3492 30.4994 39.6619V24.1115C30.4994 23.4242 29.939 22.8637 29.2517 22.8637H25.0466ZM13.9933 19.2103C13.3059 19.2103 12.7454 19.7709 12.7454 20.4581V39.9228C12.7454 40.6101 13.3058 41.1706 13.9933 41.1706H18.1982C18.8854 41.1706 19.446 40.6101 19.446 39.9228V20.4581C19.446 19.7709 18.8854 19.2103 18.1982 19.2103H13.9933ZM2.9399 29.9512H7.14475C7.83204 29.9512 8.39264 30.5117 8.39264 31.199V40.1836C8.39264 40.8709 7.83204 41.4314 7.14475 41.4314H2.9399C2.25261 41.4314 1.69201 40.8709 1.69201 40.1836V31.199C1.69209 30.5116 2.25269 29.9512 2.9399 29.9512Z" fill="#00A14B"/>
  </svg>
);

// Custom Hands Helping SVG Component
const HandsHelpingIcon: React.FC<{ className?: string }> = ({ className = "" }) => (
  <svg 
    width="44" 
    height="44" 
    viewBox="0 0 44 44" 
    fill="none" 
    xmlns="http://www.w3.org/2000/svg"
    className={className}
  >
    <g clipPath="url(#clip0_438_10440)">
      <path d="M21.9775 0.673111C18.5376 0.673111 15.7385 3.55537 15.7385 6.99532C15.7385 10.4353 18.5376 13.2343 21.9775 13.2343C25.4175 13.2343 28.2165 10.4353 28.2165 6.99532C28.2165 3.55537 25.4175 0.673111 21.9775 0.673111ZM30.7121 23.2168C33.4648 23.2168 35.7034 20.9782 35.7034 18.2256C35.7034 15.4729 33.4648 13.2343 30.7121 13.2343C27.9595 13.2343 25.7209 15.4729 25.7209 18.2256C25.7209 20.9782 27.9595 23.2168 30.7121 23.2168ZM1.92945 38.1904H3.17725C4.55566 38.1904 5.67286 37.0729 5.67286 35.6948V20.7212C5.67286 19.3428 4.55566 18.2256 3.17725 18.2256H1.92945C1.24024 18.2256 0.681641 18.7842 0.681641 19.4734V36.9426C0.681641 37.6318 1.24024 38.1904 1.92945 38.1904ZM8.16847 20.7212V35.6948C8.16847 35.9463 8.1302 36.1875 8.09443 36.4289L15.3752 40.028C16.2418 40.4595 17.1965 40.6847 18.1646 40.6861H29.4361C30.3628 40.6864 31.2713 40.4285 32.0598 39.9415L42.2765 32.7187C43.3767 31.89 43.6009 30.3228 42.7749 29.2225C42.0256 28.2236 40.5734 27.7908 39.2811 28.7243L31.6006 33.0566C31.4216 33.1504 31.2226 33.1994 31.0205 33.1992H16.7367C16.0469 33.1992 15.4889 32.6413 15.4889 31.9514C15.4889 31.2618 16.0469 30.7036 16.7367 30.7036H28.2165C29.5949 30.7036 30.7121 29.5861 30.7121 28.208C30.7121 26.8296 29.5949 25.7124 28.2165 25.7124H22.3552L16.4403 21.7692C15.4132 21.0832 14.2164 20.7212 12.9797 20.7212H8.16847Z" fill="#0082FF"/>
    </g>
    <defs>
      <clipPath id="clip0_438_10440">
        <rect width="42.5917" height="42.5917" fill="white" transform="translate(0.681641 0.589966)"/>
      </clipPath>
    </defs>
  </svg>
);

const HowItWorks: React.FC = () => {
  const steps = [
    {
      icon: PayPalIcon,
      title: "PayPal Subscription",
      color: "bg-[#E8F2FD]",
      iconColor: "text-[#002991]"
    },
    {
      icon: PDFIcon,
      title: "Upload bloodwork PDF",
      color: "bg-[#FDE4E4]",
      iconColor: "text-[#FF435B]"
    },
    {
      icon: ChartIcon,
      title: "Get instant analysis",
      color: "bg-[#EBFFF5]",
      iconColor: "text-[#00A14B]"
    }, 
    {
      icon: HandsHelpingIcon,
      title: "Receive guidance",
      color: "bg-[#E8F2FD]",
      iconColor: "text-[#0082FF]"
    },
    
  ];

  return (
    <section className="py-10 md:py-20 px-0 sm:px-6 lg:px-8 bg-[#F9FAFB]">
      <div className="max-w-10/12 mx-auto">
        {/* Title */}
        <h2 className="text-4xl sm:text-5xl font-bold text-primary-text text-center mb-20">
          How It Works
        </h2>

        {/* Process Flow */}
        <div className="relative">
          {/* Integrated curve and steps container */}
          <div className="relative w-full h-48 mb-20">
            {/* Main curve */}
            <svg className="w-full h-full" viewBox="0 0 1128 188" preserveAspectRatio="none">
              <path d="M677.982 187.186C619.581 187.186 590.216 140.304 561.837 94.9639C532.902 48.7644 505.586 5.11888 449.992 5.11888C394.398 5.11888 367.082 48.7644 338.147 94.9639C309.768 140.304 280.403 187.186 222.002 187.186C163.601 187.186 134.261 140.304 105.857 94.9639C78.4903 51.2425 52.641 9.92342 2.81405 5.49818C1.42294 5.37175 0.385932 4.15797 0.512396 2.76718C0.638861 1.37639 1.85292 0.314333 3.24403 0.466055C55.5497 5.11888 83.296 49.4218 110.132 92.2834C139.067 138.483 166.383 182.128 221.977 182.128C277.571 182.128 304.887 138.483 333.822 92.2834C362.201 46.9437 391.566 0.0614624 449.967 0.0614624C508.368 0.0614624 537.708 46.9437 566.112 92.2834C595.047 138.483 622.363 182.128 677.957 182.128C733.55 182.128 760.892 138.483 789.827 92.2834C818.206 46.9437 847.571 0.0614624 905.972 0.0614624C964.373 0.0614624 993.738 46.9437 1022.12 92.2834C1049.51 136.005 1075.36 177.299 1125.16 181.749C1126.55 181.876 1127.59 183.089 1127.46 184.505C1127.34 185.896 1126.1 186.908 1124.73 186.807C1072.42 182.154 1044.68 137.851 1017.84 94.9891C988.907 48.7897 961.591 5.14417 905.972 5.14417C850.353 5.14417 823.037 48.7897 794.102 94.9891C765.723 140.329 736.358 187.211 677.957 187.211L677.982 187.186Z" fill="#003160"/>
            </svg>

            {/* Step circles positioned on the curve */}
            {steps.map((step, index) => {
              // Calculate positions for circles on the curve
              const positions = [
                { left: '20%', top: '90%' }, // First trough
                { left: '40%', top: '5%' }, // First peak
                { left: '60%', top: '90%' }, // Second trough
                { left: '80%', top: '5%' }  // Second peak
              ];
              
              return (
                <div 
                  key={index} 
                  className="absolute transform -translate-x-1/2 -translate-y-1/2"
                  style={{ 
                    left: positions[index]?.left || '0%', 
                    top: positions[index]?.top || '50%' 
                  }}
                >
                  {/* Step Circle */}
                  <div className={`relative z-20 md:w-20 md:h-20 w-16 h-16 ${step.color} rounded-full flex items-center justify-center shadow-lg `}>
                    <step.icon className={`md:w-10 md:h-10 w-6 h-6 ${step.iconColor}`}/>
                  </div>
                  
                  {/* Step Title */}
                  <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-4 w-32">
                    <h3 className="text-sm font-semibold text-primary-text text-center">
                      {step.title}
                    </h3>
                  </div>
                </div>
              );
            })}
          </div>

          {/* Mobile steps */}
          {/* <div className="md:hidden grid grid-cols-1 gap-4 mt-8">
            {steps.map((step, index) => (
              <div key={index} className="relative flex items-center gap-4 p-4 bg-white rounded-lg shadow-sm">
                
                <div className="w-8 h-8 bg-primary-text text-white rounded-full flex items-center justify-center text-sm font-bold">
                  {index + 1}
                </div>
                
              
                <div className={`w-12 h-12 ${step.color} rounded-full flex items-center justify-center`}>
                  <step.icon className="w-6 h-6 text-white" />
                </div>
                
            
                <h3 className="text-sm font-semibold text-primary-text">
                  {step.title}
                </h3>
              </div>
            ))}
          </div> */}

          {/* Dots at start and end */}
          <div className=" absolute top-0 left-0 w-4 h-4 bg-primary-text rounded-full transform -translate-y-1/2 -translate-x-1/2 shadow-md"></div>
          <div className=" absolute top-47 right-0 w-4 h-4 bg-primary-text rounded-full transform -translate-y-1/2 translate-x-1/2 shadow-md"></div>
        </div>
      </div>
    </section>
  );
};

export default HowItWorks;
